services:
# Fast API
  fastapi:
    image: ilipili/jobmarket-fapi:latest
    container_name: jm-fapi
    ports:
      - "8888:8888"
    networks:
      - jm_network
# Neo4j database 
  jm_neo4j:
    image: neo4j:5.26-community-bullseye
    container_name: jm_neo4j
    environment:
      - NEO4J_AUTH=neo4j/neo4jpwd  # Set the username and password for Neo4j
      #- NEO4J_AUTH=none
    volumes:
      - logs:/var/log/neo4j
      - ../docker_vol/data_db/neo4j/csv:/var/lib/neo4j/import  # Mount the 'csv' folder to the Neo4j import directory
      - ../docker_vol/data_db/neo4j/dbfiles:/var/lib/neo4j/data  # Mount the database folder (optional, if you want to persist Neo4j data)
      - ../docker_vol/data_db/neo4j/script:/var/lib/neo4j/script  # Mount the folder containing your .cql script (optional)
    ports:
      - "7474:7474"  # HTTP port for Neo4j browser
      - "7687:7687"  # Bolt protocol port for client connections
    command: >
      bash -c '
        # Check if the setup has been done before by looking for the .setup_done flag file
        if [ ! -f /var/lib/neo4j/import/.setup_done ]; then
          echo "Setting initial password...";
          neo4j-admin dbms set-initial-password neo4jpwd &&
          echo "Initial password set to neo4jpwd";
          
          # Create the .setup_done flag to mark that the setup is complete
          touch /var/lib/neo4j/import/.setup_done;
          
        else
          echo "Setup already completed. Starting server...";
        fi;
        
        # Start Neo4j server
        /var/lib/neo4j/bin/neo4j console
      '
    networks:
      - jm_network
# Elasticsearch database 
  elastic:
    container_name: jm-elastic
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    environment:
      - node.name=jm-elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    volumes:
      - logs:/var/log/elasticsearch
      - ../docker_vol/data_db/elastic/dbfiles:/usr/share/elasticsearch/data
      - ../docker_vol/data_ETL:/app/data_ETL
    networks:
      - jm_network
    ports:
      - ${ES_PORT}:9200
    mem_limit: ${MEM_LIMIT}

  kibana:
    container_name: jm-kibana
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - kibanadata:/usr/share/kibana/data
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://jm-elastic:9200
    mem_limit: ${MEM_LIMIT}
    depends_on:
      - elastic
    networks:
      - jm_network
    ports:
      - 5601:5601

networks:
  jm_network:
    external: true

volumes:
  kibanadata:
    driver: local
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../docker_vol/log