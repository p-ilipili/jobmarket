jm_neo4j:
    image: neo4j:5.26-community-bullseye
    container_name: jm_neo4j
    environment:
      - NEO4J_AUTH=neo4j/neo4jpwd  # Set the username and password for Neo4j
      #- NEO4J_AUTH=none
    volumes:
      - logs:/var/log/neo4j
      - ../docker_vol/data_db/neo4j/csv:/var/lib/neo4j/import  # Mount the 'csv' folder to the Neo4j import directory
      - ../docker_vol/data_db/neo4j/dbfiles:/var/lib/neo4j/data  # Mount the database folder (optional, if you want to persist Neo4j data)
      - ../docker_vol/data_db/neo4j/script:/var/lib/neo4j/script  # Mount the folder containing your .cql script (optional)
    ports:
      - "7474:7474"  # HTTP port for Neo4j browser
      - "7687:7687"  # Bolt protocol port for client connections
    command: >
      bash -c '
        # Check if the setup has been done before by looking for the .setup_done flag file
        if [ ! -f /var/lib/neo4j/import/.setup_done ]; then
          echo "Setting initial password...";
          neo4j-admin dbms set-initial-password neo4jpwd &&
          echo "Initial password set to neo4jpwd";
          
          # Run the import script to create the database and load data
          cypher-shell -u neo4j -p neo4jpwd -f /var/lib/neo4j/script/import_ESCO_csv_en.cql &&
          echo "Data imported successfully";
          
          # Create the .setup_done flag to mark that the setup is complete
          touch /var/lib/neo4j/import/.setup_done;
          
        else
          echo "Setup already completed. Starting server...";
        fi;
        
        # Start Neo4j server
        /var/lib/neo4j/bin/neo4j console
      '
    networks:
      - jm_network

services:
setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
  # Elasticsearch database
  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - logs:/var/log/elasticsearch
      - ../docker_vol/elastic/dbfiles:/usr/share/elasticsearch/data
      - ../docker_vol/data_ETL:/app/data_ETL
    networks:
      - jm_network
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    command: >
      bash -c '
        echo "Waiting for Elasticsearch to start";
        sleep 10;
        echo "Importing data into Elasticsearch";
        curl -X POST "http://es01:9200/_bulk" -H "Content-Type: application/json" --data-binary @/app/data_ETL/adz_jobs.csv;
        curl -X POST "http://es01:9200/_bulk" -H "Content-Type: application/json" --data-binary @/app/data_ETL/muse_jobs.csv;
      '
  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    networks:
      - jm_network
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

networks:
  jm_network:
    driver: bridge

volumes:
  certs:
    driver: local
  kibanadata:
    driver: local
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../docker_vol/log